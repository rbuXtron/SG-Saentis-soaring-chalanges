/**
 * SG Säntis Cup - Pilotenfaktor-Berechnung
 * 
 * Verwaltung und Berechnung von Pilotenfaktoren
 */

import { HISTORICAL_PILOT_FACTORS } from '../config/constants.js';
import { calculatePilotFactor } from './point-calculator.js';

/**
 * Ermittelt den historischen Pilotenfaktor
 * @param {string} pilotName - Name des Piloten
 * @returns {number} - Historischer Faktor
 */
export function getHistoricalPilotFactor(pilotName) {
  return HISTORICAL_PILOT_FACTORS[pilotName] || HISTORICAL_PILOT_FACTORS.DEFAULT;
}

/**
 * Berechnet den effektiven Pilotenfaktor
 * @param {string} pilotName - Name des Piloten
 * @param {number} currentBestDistance - Aktuelle Bestleistung
 * @param {number} progressiveFactor - Progressiver Faktor basierend auf Historie
 * @returns {number} - Effektiver Pilotenfaktor
 */
export function getEffectivePilotFactor(pilotName, currentBestDistance, progressiveFactor) {
  const historicalFactor = getHistoricalPilotFactor(pilotName);
  const calculatedFactor = calculatePilotFactor(currentBestDistance);
  
  // Der bessere (niedrigere) Faktor wird verwendet
  return Math.min(progressiveFactor, historicalFactor, calculatedFactor);
}

/**
 * Analysiert die Pilotenfaktor-Entwicklung
 * @param {Array} flights - Flüge chronologisch sortiert
 * @returns {Object} - Analyse der Faktorentwicklung
 */
export function analyzePilotFactorProgression(flights) {
  const progression = [];
  let currentBestDistance = 0;
  let currentFactor = 4.0;

  flights.forEach(flight => {
    if (flight.km > currentBestDistance) {
      currentBestDistance = flight.km;
      const newFactor = calculatePilotFactor(currentBestDistance);
      
      progression.push({
        date: flight.date,
        distance: flight.km,
        oldFactor: currentFactor,
        newFactor: newFactor,
        improved: newFactor < currentFactor
      });
      
      currentFactor = newFactor;
    }
  });

  return {
    progression,
    currentFactor,
    bestDistance: currentBestDistance,
    totalImprovements: progression.filter(p => p.improved).length
  };
}